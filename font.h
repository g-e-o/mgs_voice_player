#ifndef FONT_H
#define FONT_H

#include <iostream>
#include <iomanip>
//#include <string>
//#include <unistd.h>
#include <sstream>

struct              FontChar
{
    unsigned short  code;
    std::string     letter;
};

static struct FontChar fontChars[] = {
    {0x1f01, "Ä"},
    {0x1f02, "Å"},
    {0x1f03, "Ç"},
    {0x1f04, "É"},
    {0x1f05, "Ñ"},
    {0x1f06, "Ö"},
    {0x1f07, "Ü"},
    {0x1f08, "á"},
    {0x1f09, "à"},
    {0x1f0a, "â"},
    {0x1f0b, "ä"},
    {0x1f0c, "ã"},
    {0x1f0d, "å"},
    {0x1f0e, "ç"},
    {0x1f0f, "é"},
    {0x1f10, "è"},
    {0x1f11, "ê"},
    {0x1f12, "ë"},
    {0x1f13, "í"},
    {0x1f14, "ì"},
    {0x1f15, "î"},
    {0x1f16, "ï"},
    {0x1f17, "ñ"},
    {0x1f18, "ó"},
    {0x1f19, "ò"},
    {0x1f1a, "ô"},
    {0x1f1b, "ö"},
    {0x1f1c, "õ"},
    {0x1f1d, "ú"},
    {0x1f1e, "ù"},
    {0x1f1f, "û"},
    {0x1f20, "ü"},
    {0x1f21, "†"},
    {0x1f22, "°"},
    {0x1f23, "¢"},
    {0x1f24, "£"},
    {0x1f25, "§"},
    {0x1f26, "•"},
    {0x1f27, "¶"},
    {0x1f28, "ß"},
    {0x1f29, "®"},
    {0x1f2a, "©"},
    {0x1f2b, "™"},
    {0x1f2c, "´"},
    {0x1f2d, "¨"},
    {0x1f2e, "≠"},
    {0x1f2f, "Æ"},
    {0x1f30, "Ø"},
    {0x1f31, "∞"},
    {0x1f32, "±"},
    {0x1f33, "≤"},
    {0x1f34, "≥"},
    {0x1f35, "¥"},
    {0x1f36, "µ"},
    {0x1f37, "∂"},
    {0x1f38, "∑"},
    {0x1f39, "∏"},
    {0x1f3a, "π"},
    {0x1f3b, "∫"},
    {0x1f3c, "ª"},
    {0x1f3d, "º"},
    {0x1f3e, "Ω"},
    {0x1f3f, "æ"},
    {0x1f40, "ø"},
    {0x1f41, "¿"},
    {0x1f42, "¡"},
    {0x1f43, "¬"},
    {0x1f44, "√"},
    {0x1f45, "ƒ"},
    {0x1f46, "≈"},
    {0x1f47, "∆"},
    {0x1f48, "«"},
    {0x1f49, "»"},
    {0x1f4a, "…"},
    //	{0x1f4b, "n"}, // collide
    {0x1f4c, "À"},
    {0x1f4d, "Ã"},
    {0x1f4e, "Õ"},
    {0x1f4f, "Œ"},
    {0x1f50, "œ"},
    {0x1f51, "–"},
    {0x1f52, "—"},
    {0x1f53, "“"},
    {0x1f54, "”"},
    {0x1f55, "‘"},
    {0x1f56, "’"},
    {0x1f57, "÷"},
    {0x1f58, "◊"},
    {0x1f59, "ÿ"},
    {0x1f5a, "Ÿ"},
    {0x1f5b, "⁄"},
    {0x1f5c, "€"},
    {0x1f5d, "‹"},
    {0x1f5e, "›"},
    {0x1f5f, "ﬁ"},
    {0x1f60, "ﬂ"},
    {0x1f61, "‡"},
    {0x1f62, "·"},
    {0x1f63, "‚"},
    {0x1f64, "„"},
    {0x1f65, "‰"},
    {0x1f66, "Â"},
    {0x1f67, "Ê"},
    {0x1f68, "Á"},
    {0x1f69, "Ë"},
    {0x1f6a, "È"},
    {0x1f6b, "Í"},
    {0x1f6c, "Î"},
    {0x1f6d, "Ï"},
    {0x1f6e, "Ì"},
    {0x1f6f, "Ó"},
    {0x1f70, "Ô"},
    //    {"1f71", "<APPLELOGO>"},
    {0x1f72, "Ò"},
    {0x1f73, "Ú"},
    {0x1f74, "Û"},
    {0x1f75, "Ù"},
    {0x1f76, "ı"},
    {0x1f77, "ˆ"},
    {0x1f78, "˜"},
    {0x1f79, "¯"},
    {0x1f7a, "˘"},
    {0x1f7b, "˙"},
    {0x1f7c, "˚"},
    {0x1f7d, "¸"},
    {0x1f7e, "˝"},
    /*
    {0x8020, " "},
    {0x8021, "!"},
    {0x8022, "\""},
    {0x8023, "#"},
    {0x8024, "$"},
    {0x8025, "%"},
    {0x8026, "&"},
    {0x8027, "'"},
    {0x8028, "（"},
    {0x8029, "）"},
    {0x802a, "＊"},
    {0x802b, "＋"},
    {0x802c, "，"},
    {0x802d, "－"},
    {0x802e, "．"},
    {0x802f, "／"},
*/
    {0x8020, " "},
    {0x8021, "！"},
    //    {0x8022, "″"},
    {0x8022, "＂"},
    {0x8023, "＃"},
    {0x8024, "＄"},
    {0x8025, "％"},
    {0x8026, "＆"},
    {0x8027, "′"},
    {0x8028, "（"},
    {0x8029, "）"},
    {0x802a, "＊"},
    {0x802b, "＋"},
    {0x802c, "，"},
    {0x802d, "－"},
    {0x802e, "．"},
    {0x802f, "∕"},

    /*
    {"8030", "0"},
    {"8031", "1"},
    {"8032", "2"},
    {"8033", "3"},
    {"8034", "4"},
    {"8035", "5"},
    {"8036", "6"},
    {"8037", "7"},
    {"8038", "8"},
    {"8039", "9"},
    {"803a", ":"},
    {"803b", ";"},
    {"803c", "<"},
    {"803d", "="},
    {"803e", ">"},
    {"803f", "?"},
    {"8040", "²"},
    {"8041", "A"},
    {"8042", "B"},
    {"8043", "C"},
    {"8044", "D"},
    {"8045", "E"},
    {"8046", "F"},
    {"8047", "G"},
    {"8048", "H"},
    {"8049", "I"},
    {"804a", "J"},
    {"804b", "K"},
    {"804c", "L"},
    {"804d", "M"},
    {"804e", "N"},
    {"804f", "O"},
    {"8050", "P"},
    {"8051", "Q"},
    {"8052", "R"},
    {"8053", "S"},
    {"8054", "T"},
    {"8055", "U"},
    {"8056", "V"},
    {"8057", "W"},
    {"8058", "X"},
    {"8059", "Y"},
    {"805a", "Z"},
    {"805b", "["},
    {"805c", "\\"},
    {"805d", "]"},
    {"805e", "^"},
    {"805f", "_"},
    {"8060", "`"},
    {"8061", "a"},
    {"8062", "b"},
    {"8063", "c"},
    {"8064", "d"},
    {"8065", "e"},
    {"8066", "f"},
    {"8067", "g"},
    {"8068", "h"},
    {"8069", "i"},
    {"806a", "j"},
    {"806b", "k"},
    {"806c", "l"},
    {"806d", "m"},
    {"806e", "n"},
    {"806f", "o"},
    {"8070", "p"},
    {"8071", "q"},
    {"8072", "r"},
    {"8073", "s"},
    {"8074", "t"},
    {"8075", "u"},
    {"8076", "v"},
    {"8077", "w"},
    {"8078", "x"},
    {"8079", "y"},
    {"807a", "z"},*/
    {0x8030, "０"},
    {0x8031, "１"},
    {0x8032, "２"},
    {0x8033, "３"},
    {0x8034, "４"},
    {0x8035, "５"},
    {0x8036, "６"},
    {0x8037, "７"},
    {0x8038, "８"},
    {0x8039, "９"},
    {0x803a, "："},
    {0x803b, "；"},
    {0x803c, "＜"},
    {0x803d, "＝"},
    {0x803e, "＞"},
    {0x803f, "？"},
    {0x8040, "²"},
    {0x8041, "Ａ"},
    {0x8042, "Ｂ"},
    {0x8043, "Ｃ"},
    {0x8044, "Ｄ"},
    {0x8045, "Ｅ"},
    {0x8046, "Ｆ"},
    {0x8047, "Ｇ"},
    {0x8048, "Ｈ"},
    {0x8049, "Ｉ"},
    {0x804a, "Ｊ"},
    {0x804b, "Ｋ"},
    {0x804c, "Ｌ"},
    {0x804d, "Ｍ"},
    {0x804e, "Ｎ"},
    {0x804f, "Ｏ"},
    {0x8050, "Ｐ"},
    {0x8051, "Ｑ"},
    {0x8052, "Ｒ"},
    {0x8053, "Ｓ"},
    {0x8054, "Ｔ"},
    {0x8055, "Ｕ"},
    {0x8056, "Ｖ"},
    {0x8057, "Ｗ"},
    {0x8058, "Ｘ"},
    {0x8059, "Ｙ"},
    {0x805a, "Ｚ"},
    {0x805b, "［"},
    {0x805c, "＼"},
    {0x805d, "］"},
    {0x805e, "＾"},
    {0x805f, "＿"},
    {0x8060, "｀"},
    {0x8061, "ａ"},
    {0x8062, "ｂ"},
    {0x8063, "ｃ"},
    {0x8064, "ｄ"},
    {0x8065, "ｅ"},
    {0x8066, "ｆ"},
    {0x8067, "ｇ"},
    {0x8068, "ｈ"},
    {0x8069, "ｉ"},
    {0x806a, "ｊ"},
    {0x806b, "ｋ"},
    {0x806c, "ｌ"},
    {0x806d, "ｍ"},
    {0x806e, "ｎ"},
    {0x806f, "ｏ"},
    {0x8070, "ｐ"},
    {0x8071, "ｑ"},
    {0x8072, "ｒ"},
    {0x8073, "ｓ"},
    {0x8074, "ｔ"},
    {0x8075, "ｕ"},
    {0x8076, "ｖ"},
    {0x8077, "ｗ"},
    {0x8078, "ｘ"},
    {0x8079, "ｙ"},
    {0x807a, "ｚ"},
    {0x807b, "{"},
    //{0x807c, "\r"},
    {0x807c, "\n"},
    {0x807d, "}"},
    {0x807e, "¹"},

    // Hiragana
    {0x8102, "あ"},
    {0x8104, "い"},
    {0x8106, "う"},
    {0x8108, "え"},
    {0x810a, "お"},
    {0x810b, "か"},
    {0x810c, "が"},
    {0x810d, "き"},
    {0x810f, "く"},
    {0x8111, "け"},
    {0x8113, "こ"},
    {0x8114, "ご"},
    {0x8115, "さ"},
    {0x8117, "し"},
    {0x8118, "じ"},
    {0x8119, "す"},
    {0x811b, "せ"},
    {0x811d, "そ"},
    {0x811e, "ぞ"},
    {0x811f, "た"},
    {0x8120, "だ"},
    {0x8121, "ち"},
    {0x8124, "つ"},
    {0x8126, "て"},
    {0x8127, "で"},
    {0x8128, "と"},
    {0x8129, "ど"},
    {0x812a, "な"},
    {0x812b, "に"},
    {0x812d, "ね"},
    {0x812e, "の"},
    {0x812f, "は"},
    {0x8130, "ば"},
    {0x8136, "ぶ"},
    {0x813e, "ま"},
    {0x813f, "み"},
    {0x8140, "む"}, // GCX
    //	{0x8140, " "}, // RADIO
    {0x8141, "め"},
    {0x8142, "も"},
    {0x8144, "や"},
    {0x8148, "よ"},
    {0x8149, "ら"},
    {0x814a, "り"},
    {0x814b, "る"},
    {0x814c, "れ"},
    {0x814d, "ろ"},
    {0x814f, "わ"},
    {0x8152, "を"},
    {0x8153, "ん"},

    // Katakana
    {0x8201, "ァ"},
    {0x8202, "ア"},
    {0x8203, "ィ"},
    {0x8204, "イ"},
    {0x8205, "ゥ"},
    {0x8206, "ウ"},
    {0x8207, "ェ"},
    {0x8208, "エ"},
    {0x8209, "ォ"},
    {0x820a, "オ"},
    {0x820b, "カ"},
    {0x820c, "ガ"},
    {0x820d, "キ"},
    {0x820e, "ギ"},
    {0x820f, "ク"},
    {0x8210, "グ"},
    {0x8211, "ケ"},
    {0x8212, "ゲ"},
    {0x8213, "コ"},
    {0x8214, "ゴ"},
    {0x8215, "サ"},
    {0x8216, "ザ"},
    {0x8217, "シ"},
    {0x8218, "ジ"},
    {0x8219, "ス"},
    {0x821a, "ズ"},
    {0x821b, "セ"},
    {0x821c, "ゼ"},
    {0x821d, "ソ"},
    {0x821e, "ゾ"},
    {0x821f, "タ"},
    {0x8220, "ダ"},
    {0x8221, "チ"},
    {0x8222, "ヂ"},
    {0x8223, "ッ"},
    {0x8224, "ツ"},
    {0x8225, "ヅ"},
    {0x8226, "テ"},
    {0x8227, "デ"},
    {0x8228, "ト"},
    {0x8229, "ド"},
    {0x822a, "ナ"},
    {0x822b, "ニ"},
    {0x822c, "ヌ"},
    {0x822d, "ネ"},
    {0x822e, "ノ"},
    {0x822f, "ハ"},
    {0x8230, "バ"},
    {0x8231, "パ"},
    {0x8232, "ヒ"},
    {0x8233, "ビ"},
    {0x8234, "ピ"},
    {0x8235, "フ"},
    {0x8236, "ブ"},
    {0x8237, "プ"},
    {0x8238, "ヘ"},
    {0x8239, "ベ"},
    {0x823a, "ペ"},
    {0x823b, "ホ"},
    {0x823c, "ボ"},
    {0x823d, "ポ"},
    {0x823e, "マ"},
    {0x823f, "ミ"},
    {0x8240, "ム"},
    {0x8241, "メ"},
    {0x8242, "モ"},
    {0x8243, "ャ"},
    {0x8244, "ヤ"},
    {0x8245, "ュ"},
    {0x8246, "ユ"},
    {0x8247, "ョ"},
    {0x8248, "ヨ"},
    {0x8249, "ラ"},
    {0x824a, "リ"},
    {0x824b, "ル"},
    {0x824c, "レ"},
    {0x824d, "ロ"},
    {0x824e, "ワ"},
    {0x824f, "ヲ"},
    {0x8253, "ン"},


    /*
    // For radio.dat
    {0x824f, "0"},
    {0x8250, "1"},
    {0x8251, "2"},
    {0x8252, "3"},
    {0x8253, "4"},
    {0x8254, "5"},
    {0x8255, "6"},
    {0x8256, "7"},
    {0x8257, "8"},
    {0x8258, "9"},
    {0x8260, "A"},
    {0x8261, "B"},
    {0x8262, "C"},
    {0x8263, "D"},
    {0x8264, "E"},
    {0x8265, "F"},
    {0x8266, "G"},
    {0x8267, "H"},
    {0x8268, "I"},
    {0x8269, "J"},
    {0x826a, "K"},
    {0x826b, "L"},
    {0x826c, "M"},
    {0x826d, "N"},
    {0x826e, "O"},
    {0x826f, "P"},
    {0x8270, "Q"},
    {0x8271, "R"},
    {0x8272, "S"},
    {0x8273, "T"},
    {0x8274, "U"},
    {0x8275, "V"},
    {0x8276, "W"},
    {0x8277, "X"},
    {0x8278, "Y"},
    {0x8279, "Z"},
//	{0x827a, "["},
//	{0x827b, "\\"},
//	{0x827c, "]"},
//	{0x827d, "^"},
//	{0x827e, "_"},
//	{0x827f, "`"},
    {0x8281, "a"},
    {0x8282, "b"},
    {0x8283, "c"},
    {0x8284, "d"},
    {0x8285, "e"},
    {0x8286, "f"},
    {0x8287, "g"},
    {0x8288, "h"},
    {0x8289, "i"},
    {0x828a, "j"},
    {0x828b, "k"},
    {0x828c, "l"},
    {0x828d, "m"},
    {0x828e, "n"},
    {0x828f, "o"},
    {0x8290, "p"},
    {0x8291, "q"},
    {0x8292, "r"},
    {0x8293, "s"},
    {0x8294, "t"},
    {0x8295, "u"},
    {0x8296, "v"},
    {0x8297, "w"},
    {0x8298, "x"},
    {0x8299, "y"},
    {0x829a, "z"},
*/



    // Kanji
    {0x9001, "　"},
    {0x9007, "～"},
    {0x9016, "／"},
    {0x901b, "◯"},
    {0x9022, "眼"},
    {0x9026, "行"},
    {0x9027, "7"}, // ?
    {0x9028, "漢"},
    {0x9029, "谷"},
    {0x902a, "我"},
    {0x902b, "保"},
    {0x902c, "存"},
    {0x902d, "庫"},
    {0x902e, "大"},
    {0x902f, "雪"},
    {0x9030, "原"},
    {0x9034, "見"},
    {0x9035, "赤"},
    {0x9036, "外"},
    {0x9037, "線"},
    {0x9038, "熱"},
    {0x903b, "体"},
    {0x903d, "別"},
    {0x903f, "毒"},
    {0x9043, "誠"},
    {0x9044, "調"},
    {0x9048, "使"},
    {0x9049, "用"},
    {0x904c, "迷"},
    {0x904d, "彩"},
    {0x9051, "力"},
    {0x9052, "回"},
    {0x9054, "關"},
    {0x9058, "止"},
    {0x905c, "定"},
    {0x905f, "温"},
    {0x9060, "度"},
    {0x9061, "形"},
    {0x9062, "状"},
    {0x9063, "変"},
    {0x9068, "明"},
    {0x906a, "地"},
    {0x906c, "探"},
    {0x906e, "携"},
    {0x9072, "納"},
    {0x9073, "長"},
    {0x907b, "押"},
    {0x907e, "発"},
    {0x9080, "連"},
    {0x9082, "被"},
    {0x9085, "彈"},
    {0x9086, "前"},
    {0x9087, "方"},
    {0x9089, "無"},
    {0x908e, "字"},
    {0x908f, "操"},
    {0x9090, "作"},
    {0x9091, "対"},
    {0x9094, "備"},
    {0x9095, "照"},
    {0x9097, "移"},
    {0x9098, "動"},
    {0x9099, "人"},
    {0x909b, "向"},
    {0x909d, "設"},
    {0x90a2, "楓"},
    {0x90a4, "界"},
    {0x90a6, "電"},
    {0x90a7, "子"},
    {0x90aa, "狙"},
    {0x90ab, "撃"},
    {0x90ac, "入"},
    {0x90ad, "応"},
    {0x90b5, "息"},
    {0x90ba, "頭"},
    {0x90bb, "棟"},
    {0x90c1, "器"},
    {0x90c3, "場"},
    {0x90c4, "所"},
    {0x90c6, "事"},
    {0x90c7, "周"},
    {0x90ca, "生"},
    {0x90cb, "兵"},
    {0x90cc, "戦"},
    {0x90cd, "中"},
    {0x90ce, "少"},
    {0x90d5, "者"},
    {0x90dc, "時"},
    {0x90de, "合"},
    {0x90e3, "一"},
    {0x90e4, "間"},
    {0x90e8, "解"},
    {0x90f0, "彼"},
    {0x90f1, "女"},
    {0x90f5, "冷"},
    {0x90f6, "却"},
    {0x90f9, "抜"},
    {0x90fc, "畿"},
    {0x90fe, "特"},
    {0x9108, "了"},
    {0x9109, "失"},
    {0x9111, "期"},
    {0x910b, "上"},

    // Custom
    {0x9a01, "始"},
    {0x9a02, "到"},
    //    {0x9a01, "“"}, // VR missions
    //    {0x9a02, "”"}, // VR missions
    {0x9a04, "終"},
    {0x9a05, "車"},
    {0x9a03, "音"},
    {0x9a06, "格"},
    {0x9a07, "二"},
    {0x9a08, "階"},
    {0x9a09, "渡"},
    {0x9a0a, "局"},
    {0x9a0b, "救"},
    {0x9a0c, "出"},
    {0x9a0d, "下"},
    {0x9a0e, "拷"}, // wrong
    {0x9a0f, "独"},
    {0x9a10, "房"},
    {0x9a11, "闘"},
    {0x9a12, "各"},
    {0x9a13, "承"},
    {0x9a14, "武"},
    {0x9a15, "部"},
    {0x9a16, "易"},
    {0x9a17, "通"},
    {0x9a18, "信"},
    {0x9a19, "味"},
    {0x9a1a, "死"},
    {0x9a1c, "三"},
    {0x9a1b, "廊"},
    {0x9a1d, "忍"},
    {0x9a1e, "登"},
    {0x9a1f, "再"},
    {0x9a20, "会"},
    {0x9a21, "便"},
    {0x9a22, "室"},
    {0x9a23, "犬"},
    {0x9a24, "洞"},
    {0x9a25, "窟"},
    {0x9a26, "路"},
    {0x9a27, "目"},
    {0x9a28, "勝"},
    {0x9a29, "利"},
    {0x9a2a, "持"},
    {0x9a2b, "問"},
    {0x9a2c, "脱"},
    {0x9a2d, "想"},
    {0x9a2e, "浦"},
    {0x9a2f, "躍"},
    {0x9a30, "遇"},
    {0x9a31, "墜"},
    {0x9a32, "後"},
    {0x9a33, "溶"},
    {0x9a34, "鉱"},
    {0x9a35, "号"},
    {0x9a36, "点"},
    {0x9a37, "巣"},
    {0x9a38, "鍵"},
    {0x9a39, "紛"},
    {0x9a3a, "司"},
    {0x9a3b, "令"},
    {0x9a3c, "取"},
    {0x9a3d, "得"},
    {0x9a3e, "常"},
    {0x9a3f, "未"},
    {0x9a40, "済"},

    /*
    {"d8f1a5a8b41006b91b946303e4e11f1b", "気"},
    {"8f4b4413694065bf59748c041f758fb4", "仕"},
    {"1f18bbcda5146256489165c93a457e5d", "掛"},
    {"047d54ae745b76ac2ac216c15b21f0eb", "肉"},
    {"2e6c6b893224866b5d3c6b93a5c7710d", "壁"},
    {"33e15123073b6ffc39b9c58cda7fa688", "何"},
    {"4966d3fca0ee883cada78883083eb9d9", "本"},
    {"174176e9cb1b9587995648a425518317", "出"},
    {"a00ab7e373bffbdfe3808418a6ffad6c", "触"},
    {"843e6271cb0e1b06ecd5474aab97dc05", "扉"},
    {"0cf00755b700ee5168f9ab0667214a08", "閉"},
    {"cad1f9a02ec8eb54d491140dfae53cc2", "吹"},
    {"49cb0a01903cbfaa11b894c748742693", "命"},
    {"81e463638d7491cb69038013c861292d", "進"},
    */

    {0xb009, "〔"},
    {0xb00b, "「"},

    //    {0xc03f, "？"}, // collide :'(
    {0xc07b, "〈"},
    {0xc07d, "〉"},
    {0xc07f, "・"},
    {0xc123, "っ"},
    {0xc143, "ゃ"},
    {0xc147, "ょ"},
    //    {0xc201, "ァ"}, // collide :'(
    //    {0xc203, "ィ"}, // collide :'(
    //	  {0xc223, "ッ"}, // collide :'(
    //    {0xc243, "ャ"}, // collide :'(
    //    {0xc247, "ョ"}, // collide :'(

    {0xd002, "、"},
    {0xd003, "。"},
    {0xd006, "ー"},
    {0xd00a, "〕"},
    {0xd00c, "」"},
    };

template<typename T>
static T                bitSwap(T val) {
    int halfWidth = sizeof(val) << 2;
    return (val << halfWidth | val >> halfWidth);
}

static int g_lastStrFontsCount = 0;

#include <QString>
#include <QDebug>
static bool decodeMgsString(std::string &s) {
//static bool decodeMgsString(QString &s) {
    std::stringstream   ret;
    //QString             ret;
    unsigned char       c;
    unsigned short      code;
    bool                isWideFound;

    //qDebug("str: ");
    //for (char c: s) {
    //    if (isprint(c)) {
    //        qDebug("%c", c);
    //    } else {
    //        qDebug("%x", c);
    //    }
    //}
    //qDebug("\n");

    g_lastStrFontsCount = 0;
    isWideFound = false;
    bool isEndLine = false;
    for (int i = 0; i < s.length(); i++) {
        c = s[i];
        if (c == '\n') {
            if (!isEndLine) {
                ret << c;
                isEndLine = true;
            }
            continue;
        }
        if (isprint(c)) {
            if (c == '\"') {
                ret << "\\\""; // escape quote
            } else if (c == '\\') {
                ret << "\\\\"; // escape backslash
            } else {
                //if (c == '|') {
                //    ret << '\n';
                //} else {
                //    ret << c;
                //}
                ret << c;
                isEndLine = false;
            }
        } else {
            bool isFound = false;
            if (i + 1 < s.length() && (
                    (c == 0x1f) || // Special chars
                    (c >= 0x80 && c <= 0x82) || // Hiragana / Katakana
                    (c >= 0x90 && c <= 0x9a) || // Kanji
                    (c >= 0xb0 && c <= 0xd0))) { // colliding section -_-
                if (c == 0x9a) {
                    g_lastStrFontsCount++;
                }
                code = bitSwap(*reinterpret_cast<unsigned short*>(&s[i]));
                if (code == 0x8023 && i + 3 < s.length() &&
                    bitSwap(*reinterpret_cast<unsigned short*>(&s[i + 2])) == 0x804e) {
                    //ret << "\n"; // replace endline "＃Ｎ"
                    i += 3;
                    continue;
                }
                for (auto &fontChar: fontChars) {
                    if (fontChar.code == code) {
                        ret << fontChar.letter;
                        isEndLine = false;
                        if (c != 0x1f) {
                            isWideFound = true;
                        }
                        isFound = true;
                        i++;
                        break;
                    }
                }
            }
            if (!isFound) {
                //if (c == 0) {
                //    break;
                //}
        //        if (c == 0x0a || c == 0x0d) {
        //            if (s[i+1] != 0x0d) {
        //                ret << "\n";
        //            }
        //            continue;
        //        }
                if (c == 0x0a || c == 0x0d) {
                    if (!isEndLine) {
                        ret << "\n";
                        isEndLine = true;
                    }
                    //if (s[i+1] != 0x0d) {
                    //    ret << "\n";
                    //}
                    continue;
                }
            //    if (c == '\r') {
            //        continue;
            //    }
                ret << "\\x" << std::setfill('0') << std::setw(2) << std::hex << static_cast<int>(c);
                //ret += "\\x" + std::setfill('0') + std::setw(2) + std::hex + static_cast<int>(c);
                isEndLine = false;
            }
        }
    }
    s = ret.str();
    return isWideFound;
}

static bool encodeMgsString(std::string &s, bool isWide = false) {
    std::stringstream   ret;
    bool                isWideFound;

    isWideFound = false;
    for (int i = 0; i < s.length(); ) {
        if (!s.compare(i, 2, "\\\"")) {
            ret << "\""; // unescape quote
            i += 2;
        } else if (!s.compare(i, 2, "\\\\")) {
            ret << "\\"; // unescape backslash
            i += 2;
        } else if (!s.compare(i, 2, "\\x") && i + 3 < s.length() /*&& std::all_of(&i + 2, &i + 4, ::isdigit)*/) {
            ret << static_cast<char>(std::stoi(s.substr(i + 2, 2), 0, 16));
            i += 4;
        } else if (!s.compare(i, 4, " \\n ")) {
            ret << 0x80 << 0x23 << 0x80 << 0x4e;
            i += 4;
        } else {
            bool isCharFound = false;
            for (auto &fontChar: fontChars) {
                if (!s.compare(i, fontChar.letter.length(), fontChar.letter) &&
                    (isWide || static_cast<unsigned char>(fontChar.code >> 8) == 0x1f)) {
                    ret << static_cast<unsigned char>(fontChar.code >> 8);
                    ret << static_cast<unsigned char>(fontChar.code);
                    isWideFound = true;
                    isCharFound = true;
                    i += fontChar.letter.length();
                    break;
                }
            }
            if (!isCharFound) {
                ret << s[i];
                i += 1;
            }
        }
    }
    s = ret.str();
    return (isWideFound);
}

#endif // FONT_H
